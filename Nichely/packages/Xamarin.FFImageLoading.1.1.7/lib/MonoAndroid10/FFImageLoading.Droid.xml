<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading.Droid</name>
    </assembly>
    <members>
        <member name="P:FFImageLoading.ImageService.Config">
            <summary>
            Gets FFImageLoading configuration
            </summary>
            <value>The configuration used by FFImageLoading.</value></member>
        <member name="M:FFImageLoading.ImageService.Initialize(System.Nullable{System.Int32},System.Net.Http.HttpClient,FFImageLoading.Work.IWorkScheduler,FFImageLoading.Helpers.IMiniLogger,FFImageLoading.Cache.IDiskCache,FFImageLoading.Cache.IDownloadCache,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Initialize ImageService default values. This can only be done once: during app start.
            </summary>
            <param name="maxCacheSize">Max cache size. If zero then 20% of the memory will be used.</param>
            <param name="httpClient">.NET HttpClient to use. If null then a ModernHttpClient is instanciated.</param>
            <param name="scheduler">Work scheduler used to organize/schedule loading tasks.</param>
            <param name="logger">Basic logger. If null a very simple implementation that prints to console is used.</param>
            <param name="diskCache">Disk cache. If null a default disk cache is instanciated that uses a journal mechanism.</param>
            <param name="downloadCache">Download cache. If null a default download cache is instanciated, which relies on the DiskCache</param>
            <param name="loadWithTransparencyChannel">Gets a value indicating whether images should be loaded with transparency channel. On Android we save 50% of the memory without transparency since we use 2 bytes per pixel instead of 4.</param>
            <param name="fadeAnimationEnabled">Defines if fading should be performed while loading images.</param>
            <param name="httpHeadersTimeout">Maximum time in seconds to wait to receive HTTP headers before the HTTP request is cancelled.</param>
            <param name="httpReadTimeout">Maximum time in seconds to wait before the HTTP request is cancelled.</param></member>
        <member name="M:FFImageLoading.ImageService.LoadFile(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param></member>
        <member name="M:FFImageLoading.ImageService.LoadUrl(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a new TaskParameter to load an image from a URL.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="url">URL to the file</param>
            <param name="cacheDuration">How long the file will be cached on disk</param></member>
        <member name="M:FFImageLoading.ImageService.LoadFileFromApplicationBundle(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file from application bundle.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param></member>
        <member name="M:FFImageLoading.ImageService.LoadCompiledResource(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a compiled drawable resource.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceName">Name of the resource in drawable folder without extension</param></member>
        <member name="P:FFImageLoading.ImageService.ExitTasksEarly">
            <summary>
            Gets a value indicating whether ImageService will exit tasks earlier
            </summary>
            <value><c>true</c> if it should exit tasks early; otherwise, <c>false</c>.</value></member>
        <member name="M:FFImageLoading.ImageService.SetExitTasksEarly(System.Boolean)">
            <summary>
            Sets a value indicating whether ImageService will exit tasks earlier
            </summary>
            <param name="exitTasksEarly">If set to <c>true</c> exit tasks early.</param></member>
        <member name="M:FFImageLoading.ImageService.SetPauseWork(System.Boolean)">
            <summary>
            Sets a value indicating if all loading work should be paused (silently canceled).
            </summary>
            <param name="pauseWork">If set to <c>true</c> pause/cancel work.</param></member>
        <member name="M:FFImageLoading.ImageService.CancelWorkFor(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Cancel any loading work for the given ImageView
            </summary>
            <param name="task">Image loading task to cancel.</param></member>
        <member name="M:FFImageLoading.ImageService.RemovePendingTask(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Removes a pending image loading task from the work queue.
            </summary>
            <param name="task">Image loading task to remove.</param></member>
        <member name="M:FFImageLoading.ImageService.LoadImage(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Queue an image loading task.
            </summary>
            <param name="task">Image loading task.</param></member>
        <member name="M:FFImageLoading.ImageService.InvalidateMemoryCache">
            <summary>
            Invalidates the memory cache.
            </summary></member>
        <member name="P:FFImageLoading.Work.ImageLoaderTaskBase.Parameters">
            <summary>
            Gets the parameters used to retrieve the image.
            </summary>
            <value>The parameters to retrieve the image.</value></member>
        <member name="P:FFImageLoading.Work.ImageLoaderTaskBase.Completed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:FFImageLoading.Work.ImageLoaderTaskBase" /> is completed.
            </summary>
            <value><c>true</c> if completed; otherwise, <c>false</c>.</value></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.GetKey(System.String)">
            <summary>
            Gets the cache key for this image loading task.
            </summary>
            <value>The cache key.</value></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.PrepareAndTryLoadingFromCacheAsync">
            <summary>
            Prepares the instance before it runs.
            </summary></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.CancelIfNeeded">
            <summary>
            Cancel current task only if needed
            </summary></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTaskBase.TryLoadingFromCacheAsync">
            <summary>
            Tries to load requested image from the cache asynchronously.
            </summary>
            <returns>A boolean indicating if image was loaded from cache.</returns></member>
        <member name="M:FFImageLoading.Cache.ImageCache.GetBytesPerPixel(Android.Graphics.Bitmap.Config)">
            <summary>
            Return the byte usage per pixel of a bitmap based on its configuration.
            </summary>
            <param name="config">The bitmap configuration</param>
            <returns>The byte usage per pixel</returns></member>
        <member name="M:FFImageLoading.Cache.ImageCache.GetCacheSizeInPercent(System.Single)">
            <summary>
            Gets the memory cache size based on a percentage of the max available VM memory.
            </summary>
            <example>setting percent to 0.2 would set the memory cache to one fifth of the available memory</example>
            <param name="percent">Percent of available app memory to use to size memory cache</param>
            <returns></returns></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.#ctor(FFImageLoading.Cache.IDownloadCache,FFImageLoading.Helpers.IMainThreadDispatcher,FFImageLoading.Helpers.IMiniLogger,System.String,Android.Widget.ImageView)">
            <summary>
            This constructor is useful for child classes only. It can help when having a totally different loading logic.
            </summary>
            <param name="miniLogger">Logger</param>
            <param name="key">Key.</param>
            <param name="imageView">Image view.</param></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.UsesSameNativeControl(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Indicates if the task uses the same native control
            </summary>
            <returns><c>true</c>, if same native control is used, <c>false</c> otherwise.</returns>
            <param name="task">Task to check.</param></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.PrepareAndTryLoadingFromCacheAsync">
            <summary>
            Prepares the instance before it runs.
            </summary></member>
        <member name="P:FFImageLoading.Work.ImageLoaderTask.UseFadeInBitmap">
            <summary>
            Gets or sets a value indicating whether a fade in transition is used to show the image.
            </summary>
            <value><c>true</c> if a fade in transition is used; otherwise, <c>false</c>.</value></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.TryGeneratingImageAsync">
            <summary>
            Runs the image loading task: gets image from file, url, asset or cache. Then assign it to the imageView.
            </summary></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.TryLoadingFromCacheAsync">
            <summary>
            Tries to load requested image from the cache asynchronously.
            </summary>
            <returns>A boolean indicating if image was loaded from cache.</returns></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.TryLoadingFromCacheAsync(Android.Widget.ImageView)">
            <summary>
            Tries to load requested image from the cache asynchronously.
            </summary>
            <returns>A boolean indicating if image was loaded from cache.</returns></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.LoadPlaceHolderAsync(System.String,FFImageLoading.Work.ImageSource,Android.Widget.ImageView,System.Boolean)">
            <summary>
            Loads given placeHolder into the imageView.
            </summary>
            <returns>An awaitable task.</returns>
            <param name="placeholderPath">Full path to the placeholder.</param>
            <param name="source">Source for the path: local, web, assets</param></member>
        <member name="M:FFImageLoading.Work.ImageLoaderTask.CalculateInSampleSize(Android.Graphics.BitmapFactory.Options,System.Int32,System.Int32)">
            <summary>
            Calculate an inSampleSize for use in a {@link android.graphics.BitmapFactory.Options} object when decoding
            the closest inSampleSize that is a power of 2 and will result in the final decoded bitmap
            </summary>
            <param name="options"></param>
            <param name="reqWidth"></param>
            <param name="reqHeight"></param>
            <returns></returns></member>
        <member name="M:FFImageLoading.Extensions.ImageViewExtensions.GetImageLoaderTask(Android.Widget.ImageView)">
            <summary>
            Retrieve the currently active work task (if any) associated with this imageView.
            </summary>
            <param name="imageView"></param>
            <returns></returns></member>
        <member name="P:FFImageLoading.Views.ImageViewAsync.ScaleToFit">
            <summary>
            Gets or sets a value if the image should be scale to fit in the available space keeping aspect ratio.
            <remarks>AdjustViewToBounds should be false and ScaleType should be matrix.</remarks>
            </summary></member>
        <member name="P:FFImageLoading.Views.ImageViewAsync.AlignMode">
            <summary>
            Gets or sets a value if the image should be aligned to left and bottom in the available space.
            <remarks>AdjustViewToBounds should be false and ScaleType should be matrix.</remarks>
            </summary></member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Into(FFImageLoading.Work.TaskParameter,FFImageLoading.Views.ImageViewAsync)">
            <summary>
            Loads the image into given imageView using defined parameters.
            </summary>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param></member>
        <member name="M:FFImageLoading.TaskParameterExtensions.IntoAsync(FFImageLoading.Work.TaskParameter,FFImageLoading.Views.ImageViewAsync)">
            <summary>
            Only use this method if you plan to handle exceptions in your code. Awaiting this method will give you this flexibility.
            </summary>
            <returns>An awaitable Task.</returns>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param></member>
    </members>
</doc>
